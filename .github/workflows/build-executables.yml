name: Build Executables

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: proxy-windows.zip
            build_path: dist/proxy.zip
          - os: macos-latest
            artifact_name: proxy-macos.zip
            build_path: dist/proxy-macos.zip

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install UV (Unix)
      if: runner.os != 'Windows'
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install UV (Windows)
      if: runner.os == 'Windows'
      run: |
        powershell -c "irm https://astral.sh/uv/install.ps1 | iex"
        echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: powershell

    - name: Install dependencies with UV
      run: |
        uv sync
        uv add pyinstaller

    - name: Build with PyInstaller
      run: |
        uv run pyinstaller proxy.spec

    - name: Test executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path "dist/proxy.exe") {
          Write-Host "✅ Executable created successfully"
          Get-ChildItem dist/
          Write-Host "File size: $((Get-Item dist/proxy.exe).Length / 1MB) MB"
        } else {
          Write-Host "❌ Executable not found"
          exit 1
        }
      shell: powershell

    - name: Test executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        if [ -f "dist/proxy" ]; then
          echo "✅ Executable created successfully"
          ls -la dist/
          file dist/proxy
          echo "File size: $(du -h dist/proxy | cut -f1)"
          # Make it executable
          chmod +x dist/proxy
        else
          echo "❌ Executable not found"
          exit 1
        fi
        
    - name: Zip executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Copy-Item README.md -Destination dist/
        Copy-Item LICENSE -Destination dist/
        Compress-Archive -Path dist/proxy.exe, dist/README.md, dist/LICENSE -DestinationPath dist/proxy.zip
      shell: powershell

    - name: Zip executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cp README.md dist/
        cp LICENSE dist/
        cd dist
        zip proxy-macos.zip proxy README.md LICENSE
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.build_path }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Récupérer tout l'historique pour compter les commits

    - name: Get commit count and short SHA
      id: version
      run: |
        COMMIT_COUNT=$(git rev-list --count HEAD)
        SHORT_SHA=$(git rev-parse --short HEAD)
        VERSION="v1.0.${COMMIT_COUNT}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "commit_count=${COMMIT_COUNT}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "release_name=Release ${VERSION} (${SHORT_SHA})" >> $GITHUB_OUTPUT

    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: proxy-windows.zip
        path: ./artifacts/

    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: proxy-macos.zip
        path: ./artifacts/

    - name: Rename artifacts with version
      run: |
        mv artifacts/proxy.zip artifacts/proxy-${{ steps.version.outputs.version }}-windows.zip 2>/dev/null || true
        mv artifacts/proxy-macos.zip artifacts/proxy-${{ steps.version.outputs.version }}-macos.zip 2>/dev/null || true
        ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ${{ steps.version.outputs.release_name }}
        body: |

          ## 📥 Downloads
          
          ### Windows
          - [📦 proxy-${{ steps.version.outputs.version }}-windows.zip](../../releases/download/${{ steps.version.outputs.version }}/proxy-${{ steps.version.outputs.version }}-windows.zip)
          
          ### macOS  
          - [📦 proxy-${{ steps.version.outputs.version }}-macos.zip](../../releases/download/${{ steps.version.outputs.version }}/proxy-${{ steps.version.outputs.version }}-macos.zip)
          
          ---
          
        files: |
          artifacts/proxy-${{ steps.version.outputs.version }}-windows.zip
          artifacts/proxy-${{ steps.version.outputs.version }}-macos.zip
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Clean old releases (keep last 10)
      run: |
        # Récupérer les releases et garder seulement les 10 dernières
        gh release list --limit 100 --json tagName,createdAt --jq '.[10:][].tagName' | while read tag; do
          if [ ! -z "$tag" ]; then
            echo "Suppression de la release ancienne: $tag"
            gh release delete "$tag" --yes || echo "Impossible de supprimer $tag"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
